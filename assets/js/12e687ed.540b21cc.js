"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27828],{27257:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new ObservableSortedList","params":[{"name":"compare","desc":"","lua_type":"callback?"}],"returns":[{"desc":"","lua_type":"ObservableSortedList<T>"}],"function_type":"static","source":{"line":39,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"isObservableSortedList","desc":"Returns whether the value is an observable list","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":96,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"ObserveItemsBrio","desc":"Observes all items in the list","params":[],"returns":[{"desc":"","lua_type":"Observable<Brio<T>>"}],"function_type":"method","source":{"line":104,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"FindFirstKey","desc":"Gets the first key for a given symbol","params":[{"name":"content","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Symbol"}],"function_type":"method","source":{"line":139,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"ObserveIndex","desc":"Observes the index as it changes, until the entry at the existing\\nindex is removed.","params":[{"name":"indexToObserve","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"method","source":{"line":156,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"ObserveAtIndex","desc":"Observes the current value at a given index. This can be useful for observing\\nthe first entry, or matching stuff up to a given slot.","params":[{"name":"indexToObserve","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"method","source":{"line":174,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"ObserveIndexByKey","desc":"Observes the index as it changes, until the entry at the existing\\nkey is removed.","params":[{"name":"key","desc":"","lua_type":"Symbol"}],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"method","source":{"line":202,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"GetIndexByKey","desc":"Gets the current index from the key","params":[{"name":"key","desc":"","lua_type":"Symbol"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":240,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"GetCount","desc":"Gets the count of items in the list","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":253,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"GetList","desc":"Gets a list of all entries.","params":[],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"method","source":{"line":261,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"ObserveCount","desc":"Observes the count of the list","params":[],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"method","source":{"line":273,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"Add","desc":"Adds the item to the list at the specified index","params":[{"name":"item","desc":"","lua_type":"T"},{"name":"observeValue","desc":"","lua_type":"Observable<Comparable>"}],"returns":[{"desc":"Call to remove","lua_type":"callback"}],"function_type":"method","source":{"line":283,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"Get","desc":"Gets the current item at the index, or nil if it is not defined.","params":[{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"method","source":{"line":339,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"RemoveByKey","desc":"Removes the item from the list if it exists.","params":[{"name":"key","desc":"","lua_type":"Symbol"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","source":{"line":355,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"Destroy","desc":"Cleans up the ObservableSortedList and sets the metatable to nil.","params":[],"returns":[],"function_type":"method","source":{"line":588,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}}],"properties":[{"name":"ItemAdded","desc":"Fires when an item is added","lua_type":"Signal<T, number, Symbol>","readonly":true,"source":{"line":69,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"ItemRemoved","desc":"Fires when an item is removed.","lua_type":"Signal<T, Symbol>","readonly":true,"source":{"line":78,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}},{"name":"CountChanged","desc":"Fires when the count changes.","lua_type":"RBXScriptSignal","source":{"line":86,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}}],"types":[],"name":"ObservableSortedList","desc":"A list that can be observed for blend and other components and maintains sorting order.\\n\\nThis class is very expensive to use as it enforces maintaining order on the object. Each entries produces\\nwhat is most likely 4-5 tables, and changing can result in O(n) table construction and deltas.\\n\\nHowever, for small lists that don\'t change frequently, such as a global leaderboard, this can be\\na nice small interactive class.\\n\\nFor performance reasons this class defers firing events until the next defer() event frame.","source":{"line":14,"path":"src/observablecollection/src/Shared/ObservableSortedList.lua"}}')}}]);