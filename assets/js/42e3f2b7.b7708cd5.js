"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[24607],{3905:(e,i,t)=>{t.d(i,{Zo:()=>d,kt:()=>p});var n=t(67294);function a(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function r(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);i&&(n=n.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?r(Object(t),!0).forEach((function(i){a(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function o(e,i){if(null==e)return{};var t,n,a=function(e,i){if(null==e)return{};var t,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],i.indexOf(t)>=0||(a[t]=e[t]);return a}(e,i);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var i=n.useContext(l),t=i;return e&&(t="function"==typeof e?e(i):s(s({},i),e)),t},d=function(e){var i=c(e.components);return n.createElement(l.Provider,{value:i},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var i=e.children;return n.createElement(n.Fragment,{},i)}},h=n.forwardRef((function(e,i){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(t),h=a,p=u["".concat(l,".").concat(h)]||u[h]||v[h]||r;return t?n.createElement(p,s(s({ref:i},d),{},{components:t})):n.createElement(p,s({ref:i},d))}));function p(e,i){var t=arguments,a=i&&i.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=h;var o={};for(var l in i)hasOwnProperty.call(i,l)&&(o[l]=i[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},56317:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>v,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=t(87462),a=(t(67294),t(3905));const r={},s="How ServiceBag works",o={unversionedId:"servicebag",id:"servicebag",title:"How ServiceBag works",description:"tl;dr",source:"@site/docs/servicebag.md",sourceDirName:".",slug:"/servicebag",permalink:"/NevermoreEngine/docs/servicebag",draft:!1,editUrl:"https://github.com/Quenty/NevermoreEngine/edit/main/docs/servicebag.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Design",permalink:"/NevermoreEngine/docs/design"}},l={},c=[{value:"tl;dr",id:"tldr",level:2},{value:"Why understanding ServiceBag is important",id:"why-understanding-servicebag-is-important",level:2},{value:"Is ServiceBag good?",id:"is-servicebag-good",level:2},{value:"What ServiceBag tries to achieve",id:"what-servicebag-tries-to-achieve",level:2},{value:"What is a service",id:"what-is-a-service",level:2},{value:"Service LifeCycle methods",id:"service-lifecycle-methods",level:2},{value:"What happens on ServiceBag:Init()",id:"what-happens-on-servicebaginit",level:3},{value:"What happens on ServiceBag:Start()",id:"what-happens-on-servicebagstart",level:3},{value:"What happens on ServiceBag:Destroy()",id:"what-happens-on-servicebagdestroy",level:3},{value:"How do I retrieve services",id:"how-do-i-retrieve-services",level:2},{value:"Why can&#39;t you pass in arguments into :GetService()",id:"why-cant-you-pass-in-arguments-into-getservice",level:2},{value:"How do you configure a service instead of arguments?",id:"how-do-you-configure-a-service-instead-of-arguments",level:3},{value:"Should services have side effects when initialized or started?",id:"should-services-have-side-effects-when-initialized-or-started",level:3},{value:"Dependency injection",id:"dependency-injection",level:2},{value:"Dependency injection in objects",id:"dependency-injection-in-objects",level:3},{value:"Dependency injection in binders",id:"dependency-injection-in-binders",level:3},{value:"Memory management - ServiceBag will annotate stuff for you",id:"memory-management---servicebag-will-annotate-stuff-for-you",level:2},{value:"Using ServiceBag with stuff that doesn&#39;t have access to ServiceBag",id:"using-servicebag-with-stuff-that-doesnt-have-access-to-servicebag",level:2}],d={toc:c},u="wrapper";function v(e){let{components:i,...t}=e;return(0,a.kt)(u,(0,n.Z)({},d,t,{components:i,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-servicebag-works"},"How ServiceBag works"),(0,a.kt)("h2",{id:"tldr"},"tl;dr"),(0,a.kt)("p",null,"ServiceBag is like a ",(0,a.kt)("inlineCode",{parentName:"p"},"game")," in Roblox. You can retrieve services from it, and\nit will ensure the service exists and is initialized. This will bootstrap any\nother dependent dependencies."),(0,a.kt)("h2",{id:"why-understanding-servicebag-is-important"},"Why understanding ServiceBag is important"),(0,a.kt)("p",null,"Nevermore tries to be a collection of libraries that can be plugged together,\nand not exist as a set framework that forces specific design decisions. While\nthere are certainly some design patterns these libraries will guide you to,\nyou shouldn't necessarily feel forced to operate within these set of\nscenarios."),(0,a.kt)("p",null,"That being said, in order to use certain services, like ",(0,a.kt)("inlineCode",{parentName:"p"},"CmdrService")," or\npermission service, you need to be familiar with ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceBag"),"."),(0,a.kt)("p",null,"If you're making a game with Nevermore, serviceBag solves a wide variety\nof problems with the lifecycle of the game, and is fundamental to the fast\niteration cycle intended with Nevermore."),(0,a.kt)("p",null,"Many prebuilt systems depend upon ServiceBag and expect to be initialized\nthrough ServiceBag."),(0,a.kt)("h2",{id:"is-servicebag-good"},"Is ServiceBag good?"),(0,a.kt)("p",null,"ServiceBag supports multiple production games. ServiceBag allows for\nfunctionality that isn't otherwise available in traditional programming\ntechniques in Roblox. More specifically:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Your games initialization can be controlled specifically"),(0,a.kt)("li",{parentName:"ul"},"Recursive initialization (transient dependencies) will not cause refactoring\nrequirements at higher level games. Lower-level packages can add additional\ndependencies without fear of breaking their downstream consumers."),(0,a.kt)("li",{parentName:"ul"},"Life cycle management is maintained in a standardized way"),(0,a.kt)("li",{parentName:"ul"},"You can technically have multiple copies of your service running at once. This\nis useful for plugins and stuff.")),(0,a.kt)("p",null,"While serviceBag isn't required to make a quality Roblox game, and may seem\nconfusing at first, ServiceBag or an equivalent lifecycle management system\nand dependency injection system is a really good idea."),(0,a.kt)("h2",{id:"what-servicebag-tries-to-achieve"},"What ServiceBag tries to achieve"),(0,a.kt)("p",null,"ServiceBag does service dependency injection and initialization. These words\nmay be unfamiliar with you. Dependency injection is the process of retrieving\ndependencies instead of constructing them in an object. Lifecycle management is\nthe process of managing the life of services, which often includes the game."),(0,a.kt)("p",null,"For the most part, ServiceBag is interested in the initialization of services\nwithin your game, since most services will not deconstruct. This allows for\nservices that cross-depend upon each other, for example, if service A and\nservice B both need to know about each other, serviceBag will allow for this\nto happen. A traditional module script will not allow for a circular dependency\nin the same way."),(0,a.kt)("p",null,"ServiceBag achieves circular dependency support by having a lifecycle hook\nsystem."),(0,a.kt)("h2",{id:"what-is-a-service"},"What is a service"),(0,a.kt)("p",null,"A service is a singleton, that is, a module of which exactly one exists. This\nis oftentimes very useful, especially in de-duplicating behavior. Services\nare actually something you should be familiar with on Roblox, if you've been\nprogramming on Roblox for a while."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Workspace is an example of a service in Roblox\nlocal workspace = game:GetService("Workspace")\n')),(0,a.kt)("p",null,"It's useful to define our own services. A canonical service in Nevermore looks\nlike this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--[=[\n    A canonical service in Nevermore\n    @class ServiceName\n]=]\n\nlocal require = require(script.Parent.loader).load(script)\n\nlocal Maid = require("Maid")\n\nlocal ServiceName = {}\nServiceName.ServiceName = "ServiceName"\n\nfunction ServiceName:Init(serviceBag)\n    assert(not self._serviceBag, "Already initialized")\n    self._serviceBag = assert(serviceBag, "No serviceBag")\n    self._maid = Maid.new()\n\n    -- External\n    self._serviceBag:GetService(require("OtherService"))\nend\n\nfunction ServiceName:Start()\n    print("Started")\nend\n\nfunction ServiceName:MyMethod()\n    print("Hello")\nend\n\nfunction ServiceName:Destroy()\n    self._maid:DoCleaning()\nend\n\nreturn ServiceName\n')),(0,a.kt)("h2",{id:"service-lifecycle-methods"},"Service LifeCycle methods"),(0,a.kt)("p",null,"There are 3 methods in a service that are precoded in a ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceBag"),". These\nare as follows"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Init(serviceBag)")," - Initializes the service. If any more services need to\nbe initialized then this should also get those services at this time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Start()")," - Called when the game starts. Cannot yield. Starts actual\nbehavior, including logic that depends on other services."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Destroy()")," - Cleans up the existing service")),(0,a.kt)("p",null,"All three of these services are optional. However, if you want to have\nservices bootstrapped that this service depends upon, then you should\ndo this in ",(0,a.kt)("inlineCode",{parentName:"p"},"Init")),(0,a.kt)("h3",{id:"what-happens-on-servicebaginit"},"What happens on ServiceBag:Init()"),(0,a.kt)("p",null,"When init happens, ServiceBag will called :Init() on any service that has been\nretrieved. If any of these services retrieve additional services then these\nwill also be initialized and stored in the ServiceBag. Notably ServiceBag\nwill not use the direct memory of the service, but instead create a new table\nand store the state in the ServiceBag itself."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local serviceBag = ServiceBag.new()\nserviceBag:GetService(packages.MyModuleScript)\n\nserviceBag:Init()\nserviceBag:Start()\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"ServiceBag will not allow your service to yield. This is to prevent a service\nfrom delaying your entires game start. If you need to yield, do work in start\nor export your API calls as promises. See Cmdr for a good example of how this\nworks.")),(0,a.kt)("p",null,"Retrieving a service from inside of :Init() that service is guaranteed to be\ninitialized. Services are started in the order they're initialized."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'function MyService:Init(serviceBag)\n    self._myOtherService = serviceBag:GetService(require("MyOtherService"))\n\n    -- Services are guaranteed to be initialized if you retrieve them in an\n    -- init of another service, assuming that :Init() is done via ServiceBag.\n    self._myOtherService:Register(self)\nend\n')),(0,a.kt)("p",null,"When init is over, no more services can be added to the serviceBag. "),(0,a.kt)("h3",{id:"what-happens-on-servicebagstart"},"What happens on ServiceBag:Start()"),(0,a.kt)("p",null,"When Start happens the serviceBag will go through each of its services\nthat have been initialized and attempt to call the :Start() method on it\nif it exists."),(0,a.kt)("p",null,"This is a good place to use other services that you may have needed as they\nare guaranteed to be initialized. However, you can also typically assume\ninitialization is done in the :Init() method. However, sometimes you may\nassume initialization but no start."),(0,a.kt)("h3",{id:"what-happens-on-servicebagdestroy"},"What happens on ServiceBag:Destroy()"),(0,a.kt)("p",null,"When :Destroy() is called, all services are destroyed. The serviceBag will\ncall ",(0,a.kt)("inlineCode",{parentName:"p"},"Destroy()")," on services if they offer it. This functionality is useful\nif you're initializing services during hoarcekat stories or unit tests."),(0,a.kt)("h2",{id:"how-do-i-retrieve-services"},"How do I retrieve services"),(0,a.kt)("p",null,"You retrieve a service by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"GetService"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"GetService")," takes in a table.\nIf you pass it a module script, the service bag will require the module\nscript and use the resulting definition as the service definition."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local serviceBag = ServiceBag.new()\n\nlocal myService = serviceBag:GetService(packages.MyModuleScript)\n\nserviceBag:Init()\nserviceBag:Start()\n")),(0,a.kt)("p",null,"As soon as you retrieve the service you should be able to call methods on it.\nHowever, the state of the service will be whatever it is before init or start.\nYou may want to call :Init() or :Start() before using methods on the service. "),(0,a.kt)("h2",{id:"why-cant-you-pass-in-arguments-into-getservice"},"Why can't you pass in arguments into :GetService()"),(0,a.kt)("p",null,"Service configuration is not offered in the retrieval of :GetService() because\ninherently we don't want unstable or random behavior in our games. If we had\narguments in ServiceBag then you better hope that your initialization order\ngets to configure the first service first. Otherwise, if another package adds\na service in the future then you will have different behavior."),(0,a.kt)("h3",{id:"how-do-you-configure-a-service-instead-of-arguments"},"How do you configure a service instead of arguments?"),(0,a.kt)("p",null,"Typically, you can configure a service by calling a method after :Init() is\ncalled, or after :Start() is called."),(0,a.kt)("h3",{id:"should-services-have-side-effects-when-initialized-or-started"},"Should services have side effects when initialized or started?"),(0,a.kt)("p",null,"Services should typically not have side effects when initialized or started."),(0,a.kt)("h2",{id:"dependency-injection"},"Dependency injection"),(0,a.kt)("p",null,"ServiceBag is also effectively a dependency injection system. In this system\nyou can of course, inject services into other services."),(0,a.kt)("p",null,"For this reason, we inject the ServiceBag into the actual package itself."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Service bag injection\nfunction CarCommandService:Init(serviceBag)\n    self._serviceBag = assert(serviceBag, "No serviceBag")\n\n    self._cmdrService = self._serviceBag:GetService(require("CmdrService"))\nend\n')),(0,a.kt)("h3",{id:"dependency-injection-in-objects"},"Dependency injection in objects"),(0,a.kt)("p",null,"If you've got an object, it's typical you may need a service there"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--[=[\n    @class MyClass\n]=]\n\nlocal require = require(script.Parent.loader).load(script)\n\nlocal BaseObject = require("BaseObject")\n\nlocal MyClass = setmetatable({}, BaseObject)\nMyClass.ClassName = "MyClass"\nMyClass.__index = MyClass\n\nfunction MyClass.new(serviceBag)\n    local self = setmetatable(BaseObject.new(), MyClass)\n\n    self._serviceBag = assert(serviceBag, "No serviceBag")\n    self._cameraStackService = self._serviceBag:GetService(require("CameraStackService"))\n    \n    return self\nend\n\nreturn MyClass\n')),(0,a.kt)("p",null,"It's very common to pass or inject a service bag into the service"),(0,a.kt)("h3",{id:"dependency-injection-in-binders"},"Dependency injection in binders"),(0,a.kt)("p",null,"Binders explicitly support dependency injection. You can see that a\nbinderProvider here retrieves a serviceBag (or any argument you want)\nand then the binder retrieves the extra argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return BinderProvider.new(script.Name, function(self, serviceBag)\n    -- ...\n    self:Add(Binder.new("Ragdoll", require("RagdollClient"), serviceBag))\n    -- ...\nend)\n')),(0,a.kt)("p",null,"Binders then will get the ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceBag")," as the second argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'\nfunction Ragdoll.new(humanoid, serviceBag)\n    local self = setmetatable(BaseObject.new(humanoid), Ragdoll)\n\n    self._serviceBag = assert(serviceBag, "No serviceBag")\n    -- Use services here.\n\n    return self\nend\n')),(0,a.kt)("h2",{id:"memory-management---servicebag-will-annotate-stuff-for-you"},"Memory management - ServiceBag will annotate stuff for you"),(0,a.kt)("p",null,"ServiceBag will automatically annotate your service with a memory profile name\nso that it is easy to track down which part of your codebase is using memory.\nThis fixes a standard issue with diagnosing memory in a single-script\narchitecture."),(0,a.kt)("h2",{id:"using-servicebag-with-stuff-that-doesnt-have-access-to-servicebag"},"Using ServiceBag with stuff that doesn't have access to ServiceBag"),(0,a.kt)("p",null,"If you're working with legacy code, or external code, you may not want\nto pass an initialized ServiceBag around. This will typically make the code\nless testable, so take this with caution, but you can typically use a few\nhelper methods to return fully initialized services instead of having to\nretrieve them through the servicebag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local function getAnyModule(module)\n    if serviceBag:HasService(module) then\n        return serviceBag:GetService(module)\n    else\n        return module\n    end\nend\n")),(0,a.kt)("p",null,"It's preferably your systems interop with ServiceBag directly as ServiceBag\nprovides more control, better testability, and more clarity on where things\nare coming from."))}v.isMDXComponent=!0}}]);